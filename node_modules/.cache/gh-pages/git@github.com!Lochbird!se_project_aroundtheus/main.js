!function(){"use strict";class t{constructor(t,e,s){let{name:n,link:i}=t,{handleImageClick:r}=s;this._name=n,this._link=i,this._cardSelector=e,this._handleImageClick=r}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardLikeBtn=this._cardElement.querySelector(".card__like-button"),this._cardDeleteBtn=this._cardElement.querySelector(".card__delete-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardElement.querySelector(".card__title").textContent=this._name,this._setEventListeners(),this._cardElement}_setEventListeners(){this._cardLikeBtn.addEventListener("click",(()=>{this._handleLikeButton()})),this._cardDeleteBtn.addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this)}))}_handleLikeButton(){this._cardLikeBtn.classList.toggle("card__like-button_active")}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}}class e{constructor(t,e){this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._form=e,this._inputElements=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector)}enableValidation(){this._form.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}_setEventListeners(){this._inputElements.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this.toggleButtonState()}))}))}_checkInputValidity(t){if(!t.validity.valid)return this._showInputError(t);this._hideInputError(t)}toggleButtonState(){this._hasInvalidInput()?this._disableButton():this._enableButton()}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_showInputError(t){const e=this._form.querySelector(`#${t.id}-error`);t.classList.add(this._inputErrorClass),e.textContent=t.validationMessage,e.classList.add(this._errorClass)}_hideInputError(t){const e=this._form.querySelector(`#${t.id}-error`);t.classList.remove(this._inputErrorClass),e.textContent="",e.classList.remove(this._errorClass)}_hasInvalidInput(){return!this._inputElements.every((t=>t.validity.valid))}}class s{constructor(t){let{popupElement:e}=t;this._popupElement=e}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=t=>{"Escape"===t.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(t=>{(t.target.classList.contains("modal")||t.target.classList.contains("modal__close"))&&this.close()}))}}class n extends s{constructor(t,e){super({popupElement:t}),this._handleFormSubmit=e,this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputs=this._popupForm.querySelectorAll(".modal__input")}close(){this._popupForm.reset(),super.close()}_getInputValues(){const t={};return this._inputs.forEach((e=>t[e.name]=e.value)),t}setInputValues(t){this._inputs.forEach((e=>{e.value=[t.name]}))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const i={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};class r{constructor(){this._baseURL="https://jsonplaceholder.typicode.com"}getPosts(){return fetch(`${this._baseURL}/posts`)}}console.log("this exists"),console.log(r);const o=document.querySelector("#profile-edit-button"),a=document.querySelector("#edit-profile-modal"),l=document.forms["edit-profile-form"],c=document.querySelector(".profile__title"),u=document.querySelector(".profile__description"),d=document.querySelector("#profile-title-input"),m=document.querySelector("#profile-description-input"),_=document.querySelector(".cards__list"),h=document.querySelector("#add-card-modal"),p=document.forms["add-card-modal-form"],E=document.querySelector("#profile-add-button"),g=document.querySelector("#preview-image-modal");function v(e){const s=function(e){return new t(e,"#card-template",{handleImageClick:()=>S.open(e)}).getView()}(e);return f.addItem(s)}const f=new class{constructor(t,e){let{items:s,renderer:n}=t;this._items=s,this._renderer=n,this._classElement=e}renderItems(){this._items.forEach((t=>{this._renderer(t)}))}addItem(t){this._classElement.prepend(t)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:v},_);f.renderItems(),o.addEventListener("click",(()=>{const t=y.getUserInfo();d.value=t.title,m.value=t.description,L.open()})),E.addEventListener("click",(()=>{w.toggleButtonState(),k.open()}));const L=new n(a,(function(t){y.setUserInfo(t),L.close()})),S=new class extends s{constructor(t){super({popupElement:t}),this._imageElement=this._popupElement.querySelector(".card__image"),this._titleElement=this._popupElement.querySelector(".modal__paragraph")}open(t){super.open(),this._imageElement.src=t.link,this._imageElement.alt=t.name,this._titleElement.textContent=t.name}}(g),k=new n(h,(function(t){v({name:t.title,link:t.url}),k.close()})),y=new class{constructor(t,e){this._title=t,this._description=e}getUserInfo(){return{title:this._title.textContent,description:this._description.textContent}}setUserInfo(t){this._title.textContent=t.title,this._description.textContent=t.description}}(c,u),b=new e(i,l),w=new e(i,p);L.setEventListeners(),S.setEventListeners(),k.setEventListeners(),b.enableValidation(),w.enableValidation(),(new r).getPosts().then((t=>t.json())).then((t=>console.log(t)))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixJQUFJbEgsRUFBY0MsRUFBVXFFLEdBQ2hEa0MsRUFBbUIsSUFBSXhHLEVBQWNDLEVBQVU2RSxHQUdyRHlCLEVBQWlCMUQsb0JBQ2pCdUMsRUFBV3ZDLG9CQUNYNEQsRUFBVTVELG9CQUVWcUUsRUFBa0JqRyxtQkFDbEJ1RixFQUFpQnZGLG9CQUVPLElBQUk2QyxHQUNaRSxXQUNmbUQsTUFBS0MsR0FBWUEsRUFBU0MsU0FDMUJGLE1BQUtHLEdBQVNwRCxRQUFRQyxJQUFJbUQsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vYXJvdW5kdGhldXMvLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vYXJvdW5kdGhldXMvLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvanNvbnBsYWNlaG9sZGVyY2xpZW50LmpzIiwid2VicGFjazovL2Fyb3VuZHRoZXVzLy4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9hcm91bmR0aGV1cy8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzIiwid2VicGFjazovL2Fyb3VuZHRoZXVzLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XHJcbiAgY29uc3RydWN0b3IoeyBuYW1lLCBsaW5rIH0sIGNhcmRTZWxlY3RvciwgeyBoYW5kbGVJbWFnZUNsaWNrIH0pIHtcclxuICAgIHRoaXMuX25hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy5fbGluayA9IGxpbms7XHJcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9oYW5kbGVJbWFnZUNsaWNrID0gaGFuZGxlSW1hZ2VDbGljaztcclxuICB9XHJcblxyXG4gIGdldFZpZXcoKSB7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudCA9IGRvY3VtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcclxuICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpXHJcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcblxyXG4gICAgdGhpcy5fY2FyZExpa2VCdG4gPSB0aGlzLl9jYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtYnV0dG9uXCIpO1xyXG4gICAgdGhpcy5fY2FyZERlbGV0ZUJ0biA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiLmNhcmRfX2RlbGV0ZS1idXR0b25cIlxyXG4gICAgKTtcclxuICAgIHRoaXMuX2NhcmRJbWFnZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcblxyXG4gICAgdGhpcy5fY2FyZEltYWdlLnNyYyA9IHRoaXMuX2xpbms7XHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWx0ID0gdGhpcy5fbmFtZTtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdGl0bGVcIikudGV4dENvbnRlbnQgPSB0aGlzLl9uYW1lO1xyXG5cclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fY2FyZExpa2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlTGlrZUJ1dHRvbigpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fY2FyZERlbGV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVEZWxldGVDYXJkKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9jYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlSW1hZ2VDbGljayh0aGlzKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUxpa2VCdXR0b24oKSB7XHJcbiAgICB0aGlzLl9jYXJkTGlrZUJ0bi5jbGFzc0xpc3QudG9nZ2xlKFwiY2FyZF9fbGlrZS1idXR0b25fYWN0aXZlXCIpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZURlbGV0ZUNhcmQoKSB7XHJcbiAgICB0aGlzLl9jYXJkRWxlbWVudC5yZW1vdmUoKTtcclxuICAgIHRoaXMuX2NhcmRFbGVtZW50ID0gbnVsbDtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzLCBmb3JtRWxlbWVudCkge1xyXG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IHNldHRpbmdzLmlucHV0U2VsZWN0b3I7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IHNldHRpbmdzLnN1Ym1pdEJ1dHRvblNlbGVjdG9yO1xyXG4gICAgdGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyA9IHNldHRpbmdzLmluYWN0aXZlQnV0dG9uQ2xhc3M7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBzZXR0aW5ncy5pbnB1dEVycm9yQ2xhc3M7XHJcbiAgICB0aGlzLl9lcnJvckNsYXNzID0gc2V0dGluZ3MuZXJyb3JDbGFzcztcclxuXHJcbiAgICB0aGlzLl9mb3JtID0gZm9ybUVsZW1lbnQ7XHJcblxyXG4gICAgdGhpcy5faW5wdXRFbGVtZW50cyA9IFsuLi50aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvcildO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2lucHV0RWxlbWVudHMuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIGlucHV0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9jaGVja0lucHV0VmFsaWRpdHkoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBpZiAoIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH1cclxuICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgfVxyXG5cclxuICB0b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQoKSkge1xyXG4gICAgICB0aGlzLl9kaXNhYmxlQnV0dG9uKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuX2VuYWJsZUJ1dHRvbigpO1xyXG4gIH1cclxuXHJcbiAgX2VuYWJsZUJ1dHRvbigpIHtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBfZGlzYWJsZUJ1dHRvbigpIHtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcclxuICAgIGNvbnN0IGVycm9yTWVzc2FnZUVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYFxyXG4gICAgKTtcclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvck1lc3NhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgZXJyb3JNZXNzYWdlRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihcclxuICAgICAgYCMke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXHJcbiAgICApO1xyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yTWVzc2FnZUVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgZXJyb3JNZXNzYWdlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gIH1cclxuXHJcbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcclxuICAgIHJldHVybiAhdGhpcy5faW5wdXRFbGVtZW50cy5ldmVyeSgoaW5wdXRFbGVtZW50KSA9PiBpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpO1xyXG4gIH1cclxufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcih7IHBvcHVwRWxlbWVudCB9KSB7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnQgPSBwb3B1cEVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJtb2RhbF9vcGVuZWRcIik7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwibW9kYWxfb3BlbmVkXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUVzY0Nsb3NlID0gKGV2dCkgPT4ge1xyXG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fcG9wdXBFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsXCIpIHx8XHJcbiAgICAgICAgZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJtb2RhbF9fY2xvc2VcIilcclxuICAgICAgKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwRWxlbWVudCwgaGFuZGxlRm9ybVN1Ym1pdCkge1xyXG4gICAgc3VwZXIoeyBwb3B1cEVsZW1lbnQgfSk7XHJcbiAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0ID0gaGFuZGxlRm9ybVN1Ym1pdDtcclxuICAgIHRoaXMuX3BvcHVwRm9ybSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsX19mb3JtXCIpO1xyXG5cclxuICAgIHRoaXMuX2lucHV0cyA9IHRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vZGFsX19pbnB1dFwiKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtLnJlc2V0KCk7XHJcbiAgICBzdXBlci5jbG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB7fTtcclxuICAgIFxyXG4gICAgdGhpcy5faW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiAoaW5wdXRWYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZSkpO1xyXG4gICAgcmV0dXJuIGlucHV0VmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgc2V0SW5wdXRWYWx1ZXMoZGF0YSkge1xyXG4gICAgdGhpcy5faW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XHJcbiAgICAgIGlucHV0LnZhbHVlID0gW2RhdGEubmFtZV07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICB0aGlzLl9wb3B1cEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9oYW5kbGVGb3JtU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBpbml0aWFsQ2FyZHMgPSBbXHJcbiAge1xyXG4gICAgbmFtZTogXCJZb3NlbWl0ZSBWYWxsZXlcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC95b3NlbWl0ZS5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiTGFrZSBMb3Vpc2VcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9sYWtlLWxvdWlzZS5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiQmFsZCBNb3VudGFpbnNcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS9zb2Z0d2FyZS1lbmdpbmVlci9hcm91bmQtcHJvamVjdC9iYWxkLW1vdW50YWlucy5qcGdcIixcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6IFwiTGF0ZW1hclwiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L2xhdGVtYXIuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIlZhbm9pc2UgTmF0aW9uYWwgUGFya1wiLFxyXG4gICAgbGluazogXCJodHRwczovL3ByYWN0aWN1bS1jb250ZW50LnMzLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tL3NvZnR3YXJlLWVuZ2luZWVyL2Fyb3VuZC1wcm9qZWN0L3Zhbm9pc2UuanBnXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxhZ28gZGkgQnJhaWVzXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vc29mdHdhcmUtZW5naW5lZXIvYXJvdW5kLXByb2plY3QvbGFnby5qcGdcIixcclxuICB9LFxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNldHRpbmdzID0ge1xyXG4gIGZvcm1TZWxlY3RvcjogXCIubW9kYWxfX2Zvcm1cIixcclxuICBpbnB1dFNlbGVjdG9yOiBcIi5tb2RhbF9faW5wdXRcIixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIubW9kYWxfX2J1dHRvblwiLFxyXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwibW9kYWxfX2J1dHRvbl9kaXNhYmxlZFwiLFxyXG4gIGlucHV0RXJyb3JDbGFzczogXCJtb2RhbF9faW5wdXRfdHlwZV9lcnJvclwiLFxyXG4gIGVycm9yQ2xhc3M6IFwibW9kYWxfX2Vycm9yX3Zpc2libGVcIixcclxufTtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MganNvblBsYWNlaG9sZGVyQ2xpZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX2Jhc2VVUkwgPSBcImh0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbVwiO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBvc3RzKCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVVJMfS9wb3N0c2ApO1xyXG4gICAgfVxyXG59XHJcblxyXG5jb25zb2xlLmxvZyhcInRoaXMgZXhpc3RzXCIpO1xyXG4iLCJpbXBvcnQgXCIuLi9wYWdlcy9pbmRleC5jc3NcIjtcclxuaW1wb3J0IENhcmQgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xyXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEltYWdlIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XHJcbmltcG9ydCB7IGluaXRpYWxDYXJkcywgc2V0dGluZ3MgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzLmpzXCI7XHJcbmltcG9ydCBqc29uUGxhY2Vob2xkZXJDbGllbnQgZnJvbSBcIi4uL2NvbXBvbmVudHMvanNvbnBsYWNlaG9sZGVyY2xpZW50LmpzXCI7XHJcbmNvbnNvbGUubG9nKGpzb25QbGFjZWhvbGRlckNsaWVudCk7XHJcbi8vIEVMRU1FTlRTXHJcbmNvbnN0IHByb2ZpbGVFZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9maWxlLWVkaXQtYnV0dG9uXCIpO1xyXG5jb25zdCBwcm9maWxlRWRpdE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNlZGl0LXByb2ZpbGUtbW9kYWxcIik7XHJcbmNvbnN0IHByb2ZpbGVFZGl0Rm9ybSA9IGRvY3VtZW50LmZvcm1zW1wiZWRpdC1wcm9maWxlLWZvcm1cIl07XHJcblxyXG5jb25zdCBwcm9maWxlVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX3RpdGxlXCIpO1xyXG5jb25zdCBwcm9maWxlRGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2Rlc2NyaXB0aW9uXCIpO1xyXG5cclxuY29uc3QgcHJvZmlsZVRpdGxlSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtdGl0bGUtaW5wdXRcIik7XHJcbmNvbnN0IHByb2ZpbGVEZXNjSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtZGVzY3JpcHRpb24taW5wdXRcIik7XHJcblxyXG5jb25zdCBjYXJkTGlzdEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fbGlzdFwiKTtcclxuXHJcbmNvbnN0IGFkZENhcmRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYWRkLWNhcmQtbW9kYWxcIik7XHJcbmNvbnN0IGFkZENhcmRNb2RhbEZvcm0gPSBkb2N1bWVudC5mb3Jtc1tcImFkZC1jYXJkLW1vZGFsLWZvcm1cIl07XHJcbmNvbnN0IGFkZENhcmRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2ZpbGUtYWRkLWJ1dHRvblwiKTtcclxuXHJcbmNvbnN0IHByZXZpZXdJbWFnZU1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcmV2aWV3LWltYWdlLW1vZGFsXCIpO1xyXG5cclxuLy8gRlVOQ1RJT05TXHJcbmZ1bmN0aW9uIGNyZWF0ZUNhcmQoY2FyZERhdGEpIHtcclxuICBjb25zdCBjYXJkID0gcmVuZGVyQ2FyZChjYXJkRGF0YSk7XHJcbiAgcmV0dXJuIGNhcmRTZWN0aW9uLmFkZEl0ZW0oY2FyZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckNhcmQoY2FyZERhdGEpIHtcclxuICBjb25zdCBjYXJkID0gbmV3IENhcmQoY2FyZERhdGEsIFwiI2NhcmQtdGVtcGxhdGVcIiwge1xyXG4gICAgaGFuZGxlSW1hZ2VDbGljazogKCkgPT4gaW1hZ2VQb3B1cC5vcGVuKGNhcmREYXRhKSxcclxuICB9KTtcclxuICByZXR1cm4gY2FyZC5nZXRWaWV3KCk7XHJcbn1cclxuXHJcbi8vIEhBTkRMRVJTXHJcbmZ1bmN0aW9uIGhhbmRsZUZvcm1TdWJtaXQoZGF0YSkge1xyXG4gIHVzZXJJbmZvLnNldFVzZXJJbmZvKGRhdGEpO1xyXG4gIHByb2ZpbGVFZGl0UG9wdXAuY2xvc2UoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlQWRkQ2FyZFN1Ym1pdChkYXRhKSB7XHJcbiAgY29uc3QgbmFtZSA9IGRhdGEudGl0bGU7XHJcbiAgY29uc3QgbGluayA9IGRhdGEudXJsO1xyXG4gIGNyZWF0ZUNhcmQoe25hbWUsIGxpbmt9KTtcclxuICBjYXJkUG9wdXAuY2xvc2UoKTtcclxufVxyXG5cclxuY29uc3QgY2FyZFNlY3Rpb24gPSBuZXcgU2VjdGlvbihcclxuICB7IGl0ZW1zOiBpbml0aWFsQ2FyZHMsIHJlbmRlcmVyOiBjcmVhdGVDYXJkIH0sXHJcbiAgY2FyZExpc3RFbFxyXG4pO1xyXG5jYXJkU2VjdGlvbi5yZW5kZXJJdGVtcygpO1xyXG5cclxuLy8gRVZFTlQgTElTVEVORVJTXHJcbnByb2ZpbGVFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgY29uc3QgaW5mbyA9IHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XHJcbiAgcHJvZmlsZVRpdGxlSW5wdXQudmFsdWUgPSBpbmZvLnRpdGxlO1xyXG4gIHByb2ZpbGVEZXNjSW5wdXQudmFsdWUgPSBpbmZvLmRlc2NyaXB0aW9uO1xyXG4gIHByb2ZpbGVFZGl0UG9wdXAub3BlbigpO1xyXG59KTtcclxuXHJcbmFkZENhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBhZGRGb3JtVmFsaWRhdG9yLnRvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgY2FyZFBvcHVwLm9wZW4oKTtcclxufSk7XHJcblxyXG4vLyBDTEFTU0VTXHJcbmNvbnN0IHByb2ZpbGVFZGl0UG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShwcm9maWxlRWRpdE1vZGFsLCBoYW5kbGVGb3JtU3VibWl0KTtcclxuXHJcbmNvbnN0IGltYWdlUG9wdXAgPSBuZXcgUG9wdXBXaXRoSW1hZ2UocHJldmlld0ltYWdlTW9kYWwpO1xyXG5jb25zdCBjYXJkUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShhZGRDYXJkTW9kYWwsIGhhbmRsZUFkZENhcmRTdWJtaXQpO1xyXG5cclxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8ocHJvZmlsZVRpdGxlLCBwcm9maWxlRGVzY3JpcHRpb24pO1xyXG5cclxuY29uc3QgZWRpdEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihzZXR0aW5ncywgcHJvZmlsZUVkaXRGb3JtKTtcclxuY29uc3QgYWRkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHNldHRpbmdzLCBhZGRDYXJkTW9kYWxGb3JtKTtcclxuXHJcbi8vIENMQVNTIEVWRU5UIExJU1RFTkVSU1xyXG5wcm9maWxlRWRpdFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbmltYWdlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuY2FyZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG5lZGl0Rm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbmFkZEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5cclxuY29uc3QganNvbnBsYWNlaG9sZGVyID0gbmV3IGpzb25QbGFjZWhvbGRlckNsaWVudCgpO1xyXG5qc29ucGxhY2Vob2xkZXIuZ2V0UG9zdHMoKVxyXG4udGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbi50aGVuKHBvc3RzID0+IGNvbnNvbGUubG9nKHBvc3RzKSkiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBjbGFzc0VsZW1lbnQpIHtcclxuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG5cclxuICAgIHRoaXMuX2NsYXNzRWxlbWVudCA9IGNsYXNzRWxlbWVudDtcclxuICB9XHJcblxyXG4gIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShlbGVtZW50KSB7XHJcbiAgICB0aGlzLl9jbGFzc0VsZW1lbnQucHJlcGVuZChlbGVtZW50KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cEVsZW1lbnQpIHtcclxuICAgIHN1cGVyKHsgcG9wdXBFbGVtZW50IH0pO1xyXG4gICAgdGhpcy5faW1hZ2VFbGVtZW50ID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XHJcbiAgICB0aGlzLl90aXRsZUVsZW1lbnQgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbF9fcGFyYWdyYXBoXCIpO1xyXG4gIH1cclxuXHJcbiAgb3BlbihjYXJkRGF0YSkge1xyXG4gICAgc3VwZXIub3BlbigpO1xyXG4gICAgdGhpcy5faW1hZ2VFbGVtZW50LnNyYyA9IGNhcmREYXRhLmxpbms7XHJcbiAgICB0aGlzLl9pbWFnZUVsZW1lbnQuYWx0ID0gY2FyZERhdGEubmFtZTtcclxuICAgIHRoaXMuX3RpdGxlRWxlbWVudC50ZXh0Q29udGVudCA9IGNhcmREYXRhLm5hbWU7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3Rvcih1c2VyTmFtZUVsZW1lbnQsIGpvYkVsZW1lbnQpIHtcclxuICAgIHRoaXMuX3RpdGxlID0gdXNlck5hbWVFbGVtZW50O1xyXG4gICAgdGhpcy5fZGVzY3JpcHRpb24gPSBqb2JFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlckluZm8oKSB7XHJcbiAgICBjb25zdCBpbmZvID0ge1xyXG4gICAgICB0aXRsZTogdGhpcy5fdGl0bGUudGV4dENvbnRlbnQsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLl9kZXNjcmlwdGlvbi50ZXh0Q29udGVudCxcclxuICAgIH07XHJcbiAgICByZXR1cm4gaW5mbztcclxuICB9XHJcblxyXG4gIHNldFVzZXJJbmZvKGRhdGEpIHtcclxuICAgIHRoaXMuX3RpdGxlLnRleHRDb250ZW50ID0gZGF0YS50aXRsZTtcclxuICAgIHRoaXMuX2Rlc2NyaXB0aW9uLnRleHRDb250ZW50ID0gZGF0YS5kZXNjcmlwdGlvbjtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIkNhcmQiLCJjb25zdHJ1Y3RvciIsIl9yZWYiLCJjYXJkU2VsZWN0b3IiLCJfcmVmMiIsIm5hbWUiLCJsaW5rIiwiaGFuZGxlSW1hZ2VDbGljayIsInRoaXMiLCJfbmFtZSIsIl9saW5rIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVJbWFnZUNsaWNrIiwiZ2V0VmlldyIsIl9jYXJkRWxlbWVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJfY2FyZExpa2VCdG4iLCJfY2FyZERlbGV0ZUJ0biIsIl9jYXJkSW1hZ2UiLCJzcmMiLCJhbHQiLCJ0ZXh0Q29udGVudCIsIl9zZXRFdmVudExpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJfaGFuZGxlTGlrZUJ1dHRvbiIsIl9oYW5kbGVEZWxldGVDYXJkIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwicmVtb3ZlIiwiRm9ybVZhbGlkYXRvciIsInNldHRpbmdzIiwiZm9ybUVsZW1lbnQiLCJfaW5wdXRTZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEVycm9yQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJfZm9ybSIsIl9pbnB1dEVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsIl9zdWJtaXRCdXR0b24iLCJlbmFibGVWYWxpZGF0aW9uIiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJmb3JFYWNoIiwiaW5wdXRFbGVtZW50IiwiX2NoZWNrSW5wdXRWYWxpZGl0eSIsInRvZ2dsZUJ1dHRvblN0YXRlIiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9zaG93SW5wdXRFcnJvciIsIl9oaWRlSW5wdXRFcnJvciIsIl9oYXNJbnZhbGlkSW5wdXQiLCJfZGlzYWJsZUJ1dHRvbiIsIl9lbmFibGVCdXR0b24iLCJkaXNhYmxlZCIsImFkZCIsImVycm9yTWVzc2FnZUVsZW1lbnQiLCJpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiZXZlcnkiLCJQb3B1cCIsInBvcHVwRWxlbWVudCIsIl9wb3B1cEVsZW1lbnQiLCJvcGVuIiwiX2hhbmRsZUVzY0Nsb3NlIiwiY2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwia2V5Iiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJ0YXJnZXQiLCJjb250YWlucyIsIlBvcHVwV2l0aEZvcm0iLCJoYW5kbGVGb3JtU3VibWl0Iiwic3VwZXIiLCJfaGFuZGxlRm9ybVN1Ym1pdCIsIl9wb3B1cEZvcm0iLCJfaW5wdXRzIiwicmVzZXQiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJpbnB1dFZhbHVlcyIsImlucHV0IiwidmFsdWUiLCJzZXRJbnB1dFZhbHVlcyIsImRhdGEiLCJmb3JtU2VsZWN0b3IiLCJqc29uUGxhY2Vob2xkZXJDbGllbnQiLCJfYmFzZVVSTCIsImdldFBvc3RzIiwiZmV0Y2giLCJjb25zb2xlIiwibG9nIiwicHJvZmlsZUVkaXRCdXR0b24iLCJwcm9maWxlRWRpdE1vZGFsIiwicHJvZmlsZUVkaXRGb3JtIiwiZm9ybXMiLCJwcm9maWxlVGl0bGUiLCJwcm9maWxlRGVzY3JpcHRpb24iLCJwcm9maWxlVGl0bGVJbnB1dCIsInByb2ZpbGVEZXNjSW5wdXQiLCJjYXJkTGlzdEVsIiwiYWRkQ2FyZE1vZGFsIiwiYWRkQ2FyZE1vZGFsRm9ybSIsImFkZENhcmRCdXR0b24iLCJwcmV2aWV3SW1hZ2VNb2RhbCIsImNyZWF0ZUNhcmQiLCJjYXJkRGF0YSIsImNhcmQiLCJpbWFnZVBvcHVwIiwicmVuZGVyQ2FyZCIsImNhcmRTZWN0aW9uIiwiYWRkSXRlbSIsImNsYXNzRWxlbWVudCIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY2xhc3NFbGVtZW50IiwicmVuZGVySXRlbXMiLCJpdGVtIiwiZWxlbWVudCIsInByZXBlbmQiLCJpbmZvIiwidXNlckluZm8iLCJnZXRVc2VySW5mbyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJwcm9maWxlRWRpdFBvcHVwIiwiYWRkRm9ybVZhbGlkYXRvciIsImNhcmRQb3B1cCIsInNldFVzZXJJbmZvIiwiX2ltYWdlRWxlbWVudCIsIl90aXRsZUVsZW1lbnQiLCJ1cmwiLCJ1c2VyTmFtZUVsZW1lbnQiLCJqb2JFbGVtZW50IiwiX3RpdGxlIiwiX2Rlc2NyaXB0aW9uIiwiZWRpdEZvcm1WYWxpZGF0b3IiLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwicG9zdHMiXSwic291cmNlUm9vdCI6IiJ9